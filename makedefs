
COMPILER=gcc
PREFIX=arm-none-eabi
#
# The command for calling the compiler.
#
CC=${PREFIX}-gcc

#
# The size command
#
SIZE=${PREFIX}-size

#
# The command for calling the library archiver.
#
AR=${PREFIX}-ar

#
# The command for calling the linker.
#
LD=${PREFIX}-ld

#
# The flags passed to the linker.
#
LDFLAGS=--gc-sections

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC:=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}

#
# Get the location of libc.a from the GCC front-end.
#
LIBC:=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}

#
# Get the location of libm.a from the GCC front-end.
#
LIBM=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}


#
# Get the location of sysroot from the GCC front-end
#
SYSROOT:=${shell ${CC} -print-sysroot }

#
# The command for extracting images from the linked executables.
#

OBJCOPY=${PREFIX}-objcopy

#
# Set the compiler CPU/FPU options.
#
CPU=-mcpu=cortex-m3
FPU=

CFLAGS=\
      ${CPU}              \
      ${FPU}              \
      -mthumb             \
      --specs=nosys.specs \
      --sysroot=${SYSROOT} \
      -nostdlib            \
      -ffunction-sections \
      -fdata-sections     \
      -MD                 \
      -std=c11            \
      -Wall               \
      -pedantic           \
      -c

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb \
       ${CPU}  \
       ${FPU}  \
       -MD

#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#
ifdef DEBUG
CFLAGS+=-g -D DEBUG -O0
else
CFLAGS+=-Os
endif

#
# Add the include file paths to AFLAGS and CFLAGS.
#
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}



#
# Silence Make (needs gnu make)
#
ifneq ($(VERBOSE),1)
MAKEFLAGS += --no-print-dir
endif

#
# The rule for building the object file from each C source file.
#
${COMPILER}${SUFFIX}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];                            \
	 then                                                 \
	     echo "  CC    ${<}";                             \
	 else                                                 \
	     echo ${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}; \
	 fi
	@${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@if [ -e ${@:.o=.d} ];                                   \
	then                                                     \
		sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d} ; \
	fi
endif

#
# The rule for building the object file from each assembly source file.
#
${COMPILER}${SUFFIX}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  AS    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}; \
	 fi
	@${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@if [ -e ${@:.o=.d} ];                                   \
	then                                                     \
		sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d} ; \
	fi
endif

#
# The rule for creating an object library.
#
${COMPILER}${SUFFIX}/%.a:
	@if [ 'x${VERBOSE}' = x ];     \
	 then                          \
	     echo "  AR    ${@}";      \
	 else                          \
	     echo ${AR} -cr ${@} ${^}; \
	 fi
	@${AR} -cr ${@} ${^}

#
# The rule for linking the application. Also includes a SZ command
#
${COMPILER}${SUFFIX}/%.axf:
	@if [ 'x${SCATTERgcc_${notdir ${@:.axf=}}}' = x ];                    \
	 then                                                                 \
	     ldname="${ROOT}/gcc/standalone.ld";                              \
	 else                                                                 \
	     ldname="${SCATTERgcc_${notdir ${@:.axf=}}}";                     \
	 fi;                                                                  \
	 if [ 'x${VERBOSE}' = x ];                                            \
	 then                                                                 \
	     echo "  LD    ${@} ${LNK_SCP}";                                  \
	     echo "  SZ    ${@}";                                             \
	 else                                                                 \
	     echo ${LD} -T $${ldname}                                         \
	          --entry ${ENTRY_${notdir ${@:.axf=}}}                       \
	          ${LDFLAGSgcc_${notdir ${@:.axf=}}}                          \
	          ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                  \
	          '${LIBM}' '${LIBC}' '${LIBGCC}';                            \
	     echo ${SIZE} ${@} ;                                              \
	 fi;                                                                  \
	${LD} -T $${ldname}                                                   \
	      --entry ${ENTRY_${notdir ${@:.axf=}}}                           \
	      ${LDFLAGSgcc_${notdir ${@:.axf=}}}                              \
	      ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                      \
	      '${LIBM}' '${LIBC}' '${LIBGCC}'
	@${OBJCOPY} -O binary ${@} ${@:.axf=.bin}
	@${SIZE} ${@}


